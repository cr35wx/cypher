diff --git a/.contentlayer/generated/index.d.ts b/.contentlayer/generated/index.d.ts
deleted file mode 100644
index 2d433f9..0000000
--- a/.contentlayer/generated/index.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-// This file is automatically generated by the Contentlayer.
-// This is a placeholder until `contentlayer build` has been run.
-
-export {}
diff --git a/Cypher.session.sql b/Cypher.session.sql
deleted file mode 100644
index 04f5f25..0000000
--- a/Cypher.session.sql
+++ /dev/null
@@ -1,29 +0,0 @@
-SHOW tables; INSERT INTO student_participants (
-    student_id,
-    first_name,
-    last_name,
-    college_school,
-    degree_id,
-    clinic_application_date,
-    pre_req_id,
-    clinic_training,
-    clinic_training_date,
-    expected_graduation_qtr,
-    expected_graduation_year
-    clinic_participant_status
-  )
-VALUES (
-    student_id:int,
-    'first_name:varchar',
-    'last_name:varchar',
-    'college_school:varchar',
-    degree_id:int,
-    'clinic_application_date:varchar',
-    pre_req_id:int,
-    'clinic_training:enum',
-    'clinic_training_date:varchar',
-    'expected_graduation_qtr:enum',
-    expected_graduation_year:int
-    'clinic_participant_status:enum'
-  );
-
diff --git a/backend/api/fake.py b/backend/api/fake.py
index aa5c26a..875f4f9 100644
--- a/backend/api/fake.py
+++ b/backend/api/fake.py
@@ -33,7 +33,7 @@ def students(num):
     for school, id in college_schools:
         major_ids[school] = tuple(
             major[0] for major in db.session.query(DegreeMajor.degree_id)
-            .where(DegreeMajor.academic_unit_id == id) .all()
+            .where(DegreeMajor.academic_unit_id == id).all()
         )
 
     students = []
@@ -44,8 +44,15 @@ def students(num):
             student_id=faker.random_number(digits=7),
             first_name=faker.first_name(),
             last_name=faker.last_name(),
+            email=faker.email(),
             college_school=random_school,
             degree_id=random_degree_id,
+            year_standing=faker.random_element(elements=("Freshman", "Sophomore", "Junior", "Senior")),
+            project_interest=faker.random_element(elements=("General Risk Assessment", "Audit", "Policy Review", "Other")),
+            other_description="", # reading 300 characters of text in the shell is not fun
+            how_did_you_hear="", # reading 300 characters of text in the shell is not fun
+            heard_about_month=faker.random_int(min=1, max=12),
+            heard_about_year=faker.random_int(min=2015, max=2024),
             clinic_application_date=faker.date(),
             pre_req_id=faker.random_int(min=1, max=100),
             clinic_training=faker.random_element(elements=("yes", "no")),
@@ -54,9 +61,9 @@ def students(num):
                 elements=("Winter", "Spring", "Summer", "Fall")
             ),
             expected_graduation_year=faker.random_int(min=2022, max=2026),
-            clinic_participant_status=faker.random_element(
-                elements=("In review", "Denied")
-            )
+            gender=faker.random_element(elements=("Male", "Female", "Other")),
+            ethnicity=faker.random_element(("I don't know", "Prefer not to say")),
+            clinic_participant_status=faker.random_element(elements=("In review", "Denied"))
         )
         students.append(student)
         db.session.add(student)
@@ -65,8 +72,15 @@ def students(num):
 
     for student in students:
         click.echo(f"Student: {student.first_name} {student.last_name}")
+        click.echo(f"  Student ID: {student.student_id}")
+        click.echo(f"  Student Email: {student.email}")
         click.echo(f"  Student College: {student.college_school}")
         click.echo(f"  Student Degree ID: {student.degree_id}")
+        click.echo(f"  Student Year Standing: {student.year_standing}")
+        click.echo(f"  Student Project Interest: {student.project_interest}")
+        click.echo(f"  Student Other Description: {student.other_description}")
+        click.echo(f"  Student How Did You Hear: {student.how_did_you_hear}")
+        click.echo(f"  Student Heard About Month&Year: {student.heard_about_month}/{student.heard_about_year}")
         click.echo(f"  Student Application Date: {student.clinic_application_date}")
         click.echo(f"  Student Pre-Req ID: {student.pre_req_id}")
         click.echo(f"  Student Clinic Training: {student.clinic_training}")
@@ -77,6 +91,8 @@ def students(num):
         click.echo(
             f"  Student Expected Graduation Year: {student.expected_graduation_year}"
         )
+        click.echo(f"  Student Gender: {student.gender}")
+        click.echo(f"  Student Ethnicity: {student.ethnicity}")
         click.echo(
             f"  Student Participant Status: {student.clinic_participant_status}"
         )
diff --git a/backend/api/models.py b/backend/api/models.py
index 1df94c0..40bff72 100644
--- a/backend/api/models.py
+++ b/backend/api/models.py
@@ -12,6 +12,8 @@ from .app import db
 
 # Tables not yet implemented: StudentInterest, StudentPrerequesite, ApprovedPrerequesites
 
+
+# with how bloated these two models are, you'll need 'select * from [prospective_]student_participants\G;' to see anything
 class ProspectiveStudentParticipant(db.Model):
     """The model that will be used to store a *prospective* student's application form data,
     a student accepted to work with the clinic will be represented as the "StudentParticipant" model.
@@ -21,14 +23,26 @@ class ProspectiveStudentParticipant(db.Model):
     student_id = mapped_column(Integer, primary_key=True, autoincrement=False)
     first_name = mapped_column(String(30))
     last_name = mapped_column(String(30))
+    email = mapped_column(String(30))
     college_school = mapped_column(
         String(50), ForeignKey("academic_units.college_name")
     )
     degree_id = mapped_column(Integer, ForeignKey("degree_majors.degree_id"))
+    year_standing = mapped_column(Enum("Freshman", "Sophomore", "Junior", "Senior"))
+    project_interest = mapped_column(
+        Enum("General Risk Assessment", "Audit", "Policy Review", "Other")
+    )
+    other_description = mapped_column(String(300))
+    how_did_you_hear = mapped_column(String(300))
+    heard_about_month = mapped_column(Integer)
+    heard_about_year = mapped_column(Integer)
     clinic_application_date = mapped_column(String(10))
     pre_req_id = mapped_column(Integer)
     expected_graduation_qtr = mapped_column(Enum("Fall", "Winter", "Spring", "Summer"))
     expected_graduation_year = mapped_column(Integer)
+    gender = mapped_column(String(10))
+    ethnicity = mapped_column(String(30))
+    clinic_participant_status = mapped_column(Enum("In review", "Accepted", "Denied"))
 
 
 class StudentParticipant(db.Model):
@@ -38,18 +52,30 @@ class StudentParticipant(db.Model):
     student_id = mapped_column(Integer, primary_key=True, autoincrement=False)
     first_name = mapped_column(String(30))
     last_name = mapped_column(String(30))
+    email = mapped_column(String(30))
     college_school = mapped_column(
         String(50), ForeignKey("academic_units.college_name")
     )
     degree_id = mapped_column(Integer, ForeignKey("degree_majors.degree_id"))
+    year_standing = mapped_column(Enum("Freshman", "Sophomore", "Junior", "Senior"))
+    project_interest = mapped_column(
+        Enum("General Risk Assessment", "Audit", "Policy Review", "Other")
+    )
+    other_description = mapped_column(String(300))
+    how_did_you_hear = mapped_column(String(300))
+    heard_about_month = mapped_column(Integer)
+    heard_about_year = mapped_column(Integer)
     clinic_application_date = mapped_column(String(10))
     pre_req_id = mapped_column(Integer)  # this will eventually refer to some prereq table
     clinic_training = mapped_column(Enum("yes", "no"))
-    clinic_training_date = mapped_column(String(10)) # will possibly need to change to date type
+    clinic_training_date = mapped_column(String(10))  # will possibly need to change to date type
     expected_graduation_qtr = mapped_column(Enum("Fall", "Winter", "Spring", "Summer"))
     expected_graduation_year = mapped_column(Integer)
+    gender = mapped_column(String(10))
+    ethnicity = mapped_column(String(30))
     clinic_participant_status = mapped_column(Enum("In review", "Accepted", "Denied"))
 
+
 class DegreeMajor(db.Model):
     __tablename__ = "degree_majors"
     degree_id = mapped_column(Integer, primary_key=True)
@@ -98,7 +124,11 @@ class Course(db.Model):
     course_number = mapped_column(String(30))
 
     __table_args__ = (
-        UniqueConstraint("course_department", "course_number", name="course_department_course_number_uc"),
+        UniqueConstraint(
+            "course_department",
+            "course_number",
+            name="course_department_course_number_uc",
+        ),
     )
 
     def __repr__(self):
@@ -125,16 +155,53 @@ class ClinicJobRole(db.Model):
     role_name = mapped_column(String(30), unique=True)
     system_access = mapped_column(Integer)
 
+# the two tables below are the same for now but will be different in the future
+class ProspectiveClientOrganization(db.Model):
+    __tablename__ = "prospective_client_organizations"
+    org_id = mapped_column(Integer, primary_key=True)
+    org_name = mapped_column(String(60), unique=True)
+    org_type_id = mapped_column(
+        Integer, ForeignKey("client_organization_types.org_type_id")
+    )
+    org_contact_fname = mapped_column(String(30))
+    org_contact_lname = mapped_column(String(30))
+    org_contact_email = mapped_column(String(30))
+    org_contact_phone = mapped_column(String(12))
+
+    org_website = mapped_column(String(60))
+    org_annual_revenue = mapped_column(Integer)
+    it_employee_count = mapped_column(Integer)
+    data_description = mapped_column(String(300))
+    recent_risk_assessment = mapped_column(Enum("Never", "1-2 years ago", "3-5 years ago", "> 5 years ago"))
+    project_interest = mapped_column(Enum("General Risk Assessment", "Audit", "Policy Review", "Other"))
+    other_description = mapped_column(String(300))
+    how_did_you_hear = mapped_column(String(300))
+    requests_or_comments = mapped_column(String(300))
+
 
 class ClientOrganization(db.Model):
     __tablename__ = "client_organizations"
     org_id = mapped_column(Integer, primary_key=True)
     org_name = mapped_column(String(60), unique=True)
+    org_type_id = mapped_column(
+        Integer, ForeignKey("client_organization_types.org_type_id")
+    )
     org_contact_fname = mapped_column(String(30))
     org_contact_lname = mapped_column(String(30))
     org_contact_email = mapped_column(String(30))
-    org_contact_phone = mapped_column(String(10))
-    org_type_id = mapped_column(Integer, ForeignKey("client_organization_types.org_type_id"))
+    org_contact_phone = mapped_column(String(12))
+
+    org_website = mapped_column(String(60))
+    org_annual_revenue = mapped_column(Integer)
+    it_employee_count = mapped_column(Integer)
+    data_description = mapped_column(String(300))
+    recent_risk_assessment = mapped_column(Enum("Never", "1-2 years ago", "3-5 years ago", ">5 years ago"))
+    project_interest = mapped_column(Enum("General Risk Assessment", "Audit", "Policy Review", "Other"))
+    other_description = mapped_column(String(300))
+    how_did_you_hear = mapped_column(String(300))
+    requests_or_comments = mapped_column(String(300))
+
+    
 
     projects = db.relationship("ClientProject", backref="client_organization")
 
@@ -154,8 +221,10 @@ class ClientProject(db.Model):
     project_name = mapped_column(String(60))
     project_start_date = mapped_column(String(10))
     project_end_date = mapped_column(String(10))
-    clinic_service_area_id = mapped_column(Integer, ForeignKey("clinic_service_areas.service_area_id"))
-    student_team_id = mapped_column(Integer) # ????
+    clinic_service_area_id = mapped_column(
+        Integer, ForeignKey("clinic_service_areas.service_area_id")
+    )
+    student_team_id = mapped_column(Integer)  # ????
 
 
 # any model added to this tuple will be added to the admin interface
@@ -169,7 +238,8 @@ admin_models = (
     StudentGroup,
     ClinicServiceArea,
     ClinicJobRole,
+    ProspectiveClientOrganization,
     ClientOrganization,
     ClientOrgnizationType,
     ClientProject,
-)
\ No newline at end of file
+)
diff --git a/backend/api/routes.py b/backend/api/routes.py
index 24472ca..f6fedef 100644
--- a/backend/api/routes.py
+++ b/backend/api/routes.py
@@ -1,44 +1,341 @@
 import time
 import pprint
 from datetime import datetime
-from flask import Blueprint, request
+from flask import Blueprint, request, jsonify
+from sqlalchemy.exc import IntegrityError
 
-from .models import ProspectiveStudentParticipant
+from .models import (
+    ProspectiveStudentParticipant,
+    DegreeMajor,
+    ProspectiveClientOrganization,
+    ClientOrgnizationType,
+)
+from .app import db
 
 # this will probably be refactored later once we know what were
 # doing, for now everything can go under the "api" blueprint
 api = Blueprint("api", __name__)
 
+MAX_NAME_LENGTH = 30
+STUDENT_ID_LENGTH = 7
+MAX_TEXT_AREA_LENGTH = 300
+MAX_ACCEPTED_REVENUE = 10**10
 
-@api.route("/api/student", methods=["GET", "POST"])
+
+######################### STUDENT APPLICATION ###############################
+def validate_name(name):
+    if not name:
+        return "Name is required."
+
+    # people can have multiple last names, a middle name they include, or something like "III"
+    # these are all put into an array of last names
+    first_name, *last_names = name.split(" ") if name else ("", "")
+
+    if not last_names:
+        return "Both first and last names are required."
+    if not first_name.isalpha():
+        return "Invalid name. Both first and last names should contain only letters. Remove '.' from suffixes"
+    for name in last_names:
+        if not name.isalpha():
+            return "Invalid name. Both first and last names should contain only letters. Remove '.' from suffixes"
+
+    if len(first_name) > MAX_NAME_LENGTH or len(" ".join(last_names)) > MAX_NAME_LENGTH:
+        return "First and last names cannot exceed 30 characters each."
+
+
+def validate_student_id(student_id):
+    if not student_id:
+        return "Student ID is required."
+    if not (student_id.isdigit() and len(student_id) == STUDENT_ID_LENGTH):
+        return "Student ID must be a 7-digit number."
+
+
+def validate_college(college):
+    school = college.get("school", "")
+    major = college.get("major", "")
+    if not school or not major:
+        return "Both school and major must be selected."
+
+
+def validate_year_standing(year_standing):
+    if not year_standing:
+        return "Year Standing must be selected."
+
+
+def validate_graduation_qtr(graduation_qtr):
+    if not graduation_qtr:
+        return "Graduation Quarter must be selected."
+
+
+def validate_project_type(project_type, other_description):
+    if not project_type:
+        return "Project Type must be selected."
+    elif project_type == "Other":
+        if not other_description:
+            return "Please provide a description of your project type."
+        elif len(other_description) > MAX_TEXT_AREA_LENGTH:
+            return "The description should not exceed 300 characters."
+
+
+def validate_how_did_you_hear(how_did_you_hear):
+    if len(how_did_you_hear) > MAX_TEXT_AREA_LENGTH:
+        return "The response for 'How did you hear about us?' should not exceed 300 characters."
+
+
+def validate_student_form(student_data):
+    name_error = validate_name(student_data.get("name", ""))
+    student_id_error = validate_student_id(student_data.get("studentID", ""))
+    college_error = validate_college(student_data.get("college", {}))
+    year_standing_error = validate_year_standing(student_data.get("yearStanding", ""))
+    graduation_qtr_error = validate_graduation_qtr(
+        student_data.get("graduationDate", {}).get("quarter", "")
+    )
+    project_type_error = validate_project_type(
+        student_data.get("projectType", ""), student_data.get("otherDescription", "")
+    )
+    how_did_you_hear_error = validate_how_did_you_hear(
+        student_data.get("howDidYouHear", "")
+    )
+
+    errors = [
+        error
+        for error in (
+            name_error,
+            student_id_error,
+            college_error,
+            year_standing_error,
+            graduation_qtr_error,
+            project_type_error,
+            how_did_you_hear_error,
+        )
+        if error
+    ]
+
+    return errors
+
+
+@api.route("/student-application", methods=["POST"])
 def student_application():
-    if request.method == "POST":
-        # parson json or whatever
-
-        # the json data will eventually be transformed to this model class
-        # the ... are placeholders
-        student = ProspectiveStudentParticipant(
-            student_id=...,
-            first_name=...,
-            last_name=...,
-            college_school=...,
-            degree_id=...,
-            clinic_application_date=datetime.now().strftime('%Y-%m-%d'),
-            pre_req_id=...,
-            expected_graduation_qtr=...,
-            expected_graduation_year=...,
-        ) 
-
-        pprint.pprint(request.json)
-        return "form data printed to console"
-
-    # just random json that can be fetched from react with the code block under the line below
-    return {"date": datetime.now().strftime('%Y-%m-%d')}
-
-
-#   const [currentTime, setCurrentTime] = useState(0);
-#   useEffect(() => {
-#     fetch('/api/student').then(res => res.json()).then(data => {
-#       setCurrentTime(data.time);
-#     });
-#   }, []);
+    form_data = request.json
+    errors = validate_student_form(form_data)
+    if errors:
+        print(errors)
+        return jsonify({"errors": errors}), 400
+
+    pprint.pprint(form_data)
+
+    first_name, *last_names = form_data.get("name").split()
+    # this could get the id of the undergrad or grad versions of the degree,
+    # the form currently doesnt ask if you are undergrad or grad, it just assumes youre undergrad
+    student_degree_id = (
+        db.session.query(DegreeMajor.degree_id)
+        .where(DegreeMajor.degree_name == form_data.get("college").get("major"))
+        .first()
+    )
+    student = ProspectiveStudentParticipant(  # man....
+        student_id=form_data.get("studentID"),
+        first_name=first_name,
+        last_name=" ".join(last_names),
+        email=form_data.get("studentEmail"),
+        college_school=form_data.get("college").get("school"),
+        degree_id=student_degree_id[0],
+        year_standing=form_data.get("yearStanding"),
+        project_interest=form_data.get("projectType"),
+        other_description=form_data.get("otherDescription"),
+        heard_about_month=form_data.get("whenDidYouHear").get("heardAboutMonth"),
+        heard_about_year=form_data.get("whenDidYouHear").get("heardAboutYear"),
+        how_did_you_hear=form_data.get("howDidYouHear"),
+        clinic_application_date=datetime.now().strftime("%Y-%m-%d"),
+        pre_req_id=1,  # still havent gotten to ask about this
+        expected_graduation_qtr=form_data.get("graduationDate").get("quarter"),
+        expected_graduation_year=form_data.get("graduationDate").get("year"),
+        gender=form_data.get("gender"),
+        ethnicity=form_data.get("ethnicity"),
+    )
+
+    try:
+        db.session.add(student)
+        db.session.commit()
+    except IntegrityError:
+        db.session.rollback()
+        return (
+            jsonify({
+                "errors": "Student with this ID already exists in our records. Please contact faculty."
+                }),
+            409,
+        )
+
+    print(f"A student application has been submitted and added to the database.")
+    return jsonify({"message": "Application submitted successfully."}), 201
+######################### STUDENT APPLICATION ###############################
+
+
+######################### CLIENT APPLICATION ###############################
+def validate_org_name(org_name):
+    if not org_name:
+        return "Organization Name is required."
+
+
+def validate_org_type(org_type):
+    if not org_type:
+        return "Organization Type is required."
+
+
+def validate_revenue(revenue):
+    if not revenue:
+        return "Annual Revenue is required."
+    elif not revenue.isdigit():
+        return "Annual Revenue must be a number."
+    elif int(revenue) > MAX_ACCEPTED_REVENUE:
+        return "Annual Revenue cannot exceed 10 digits. Contact faculty."
+
+
+def validate_data_description(data_description):
+    if not data_description:
+        return "Data Description is required."
+    elif len(data_description) > MAX_TEXT_AREA_LENGTH:
+        return "The description should not exceed 300 characters."
+
+
+def validate_risk_assessment(recent_risk_assessment):
+    if not recent_risk_assessment:
+        return "Recent Risk Assessment is required."
+
+
+def validate_comments(requests_or_comments):
+    if len(requests_or_comments) > MAX_TEXT_AREA_LENGTH:
+        return "The response for 'How did you hear about us?' should not exceed 300 characters."
+
+
+def validate_client_form(client_data):
+    org_name_error = validate_org_name(client_data.get("orgName", ""))
+    org_type_error = validate_org_name(client_data.get("orgType", ""))
+    org_contact_name_error = validate_name(client_data.get("contactPersonName", ""))
+    org_revenue_error = validate_revenue(client_data.get("annualRevenue", ""))
+    data_description_error = validate_data_description(
+        client_data.get("dataDescription", "")
+    )
+    recent_risk_assessment_error = validate_risk_assessment(
+        client_data.get("recentRiskAssessment", "")
+    )
+    project_type_error = validate_project_type(
+        client_data.get("projectType", ""), client_data.get("otherDescription", "")
+    )
+    how_did_you_hear_error = validate_how_did_you_hear(
+        client_data.get("howDidYouHear", "")
+    )
+    comments_error = validate_comments(client_data.get("comments", ""))
+
+    errors = [
+        error
+        for error in (
+            org_name_error,
+            org_type_error,
+            org_contact_name_error,
+            org_revenue_error,
+            data_description_error,
+            recent_risk_assessment_error,
+            project_type_error,
+            how_did_you_hear_error,
+            comments_error,
+        )
+        if error
+    ]
+
+    return errors
+
+
+@api.route("/client-application", methods=["POST"])
+def client_application():
+    form_data = request.json
+    errors = validate_client_form(form_data)
+    if errors:
+        return jsonify({"errors": errors}), 400
+
+    pprint.pprint(form_data)
+
+    contact_fname, *contact_lnames = form_data.get("contactPersonName").split()
+    org_type_id = (
+        db.session.query(ClientOrgnizationType.org_type_id)
+        .where(ClientOrgnizationType.org_type_name == form_data.get("orgType"))
+        .first()
+    )
+
+    client = ProspectiveClientOrganization(
+        org_name=form_data.get("orgName"),
+        org_type_id=org_type_id[0],
+        org_contact_fname=contact_fname,
+        org_contact_lname=" ".join(contact_lnames),
+        org_contact_email=form_data.get("contactPersonEmail"),
+        org_contact_phone=form_data.get("contactPersonPhone"),
+        org_website=form_data.get("orgWebsite"),
+        org_annual_revenue=form_data.get("annualRevenue"),
+        it_employee_count=form_data.get("ITemployeeCount"),
+        data_description=form_data.get("dataDescription"),
+        recent_risk_assessment=form_data.get("recentRiskAssessment"),
+        project_interest=form_data.get("projectType"),
+        other_description=form_data.get("otherDescription"),
+        how_did_you_hear=form_data.get("howDidYouHear"),
+        requests_or_comments=form_data.get("requestsOrComments"),
+    )
+
+    try:
+        db.session.add(client)
+        db.session.commit()
+    except IntegrityError:
+        db.session.rollback()
+        return (
+            jsonify({
+                "errors": "An organization with this ID or Name already exists in our records. Please contact faculty."
+                }), 409,
+        )
+
+    print(f"A client application has been submitted and added to the database.")
+    return jsonify({"message": "Application submitted successfully."}), 201
+
+
+######################### CLIENT APPLICATION ###############################
+
+
+
+
+@api.route("/student", methods=["GET"])
+def stuff():
+    return jsonify({"message": "test msg."}), 201
+
+
+@api.route("/api/academic-units", methods=["GET"])
+def academic_units():
+    # return db.session.query(AcademicUnit).all()
+    pass
+
+
+@api.route("/api/academic-units/<int:academic_unit_id>", methods=["GET"])
+def academic_unit(academic_unit_id):
+    pass
+
+
+@api.route("/api/courses", methods=["GET"])
+def courses():
+    pass
+
+
+@api.route("/api/courses/<int:course_id>", methods=["GET"])
+@api.route("/api/degree-majors", methods=["GET"])
+def degree_majors():
+    pass
+
+
+@api.route("/api/degree-majors/<int:degree_id>", methods=["GET"])
+def degree_major(degree_id):
+    pass
+
+
+@api.route("/api/student-participants/", methods=["GET"])
+def student_participants():
+    pass
+
+
+@api.route("/api/student-participants/<int:student_id>", methods=["GET"])
+def student_participant(student_id):
+    pass
diff --git a/backend/populate.py b/backend/populate.py
index 9d2aedd..6101075 100644
--- a/backend/populate.py
+++ b/backend/populate.py
@@ -9,6 +9,7 @@ from api.models import (
     ClinicJobRole,
     AcademicUnit,
     DegreeMajor,
+    ClientOrgnizationType
 )
 
 # Schools
@@ -131,6 +132,10 @@ public = ClinicJobRole(role_name="Public")
 # Participant status
 
 
+# Client Organization Types
+non_profit = ClientOrgnizationType(org_type_name="Non-Profit")
+for_profit = ClientOrgnizationType(org_type_name="For-Profit")
+
 
 
 
@@ -219,4 +224,6 @@ huge_gross_tuple = (
     clinic_director,
     board_of_directors,
     public,
+    non_profit,
+    for_profit
 )
diff --git a/frontend/src/components/pages/ClientForm.jsx b/frontend/src/components/pages/ClientForm.jsx
index 01dc9ea..85595cd 100644
--- a/frontend/src/components/pages/ClientForm.jsx
+++ b/frontend/src/components/pages/ClientForm.jsx
@@ -61,7 +61,7 @@ const ContactPersonName = ({ contactPersonName, setContactPersonName }) => {
         autoComplete="name"
         required
         min={2}
-        max={30}
+        max={61}
       />
     </>
   );
@@ -150,6 +150,8 @@ const AnnualRevenue = ({ annualRevenue, setAnnualRevenue }) => {
         type="text"
         placeholder="$"
         onChange={(e) => setAnnualRevenue(e.target.value)}
+        max={999999999999}
+        required
       />
     </>
   );
@@ -171,7 +173,9 @@ const ITEmployeeCount = ({ ITemployeeCount, setITemployeeCount }) => {
         placeholder="Number of IT Staff"
         onChange={(e) => setITemployeeCount(e.target.value)}
         min={0}
+        max={100000}
         step={1}
+        required
       />
     </>
   );
@@ -217,7 +221,7 @@ const RecentRiskAssessment = ({
         onChange={(e) => setRecentRiskAssessment(e.target.value)}
       >
         <option value="">Select...</option>
-        <option value="never">Never</option>
+        <option value="Never">Never</option>
         <option value="1-2 years ago">1-2 years ago</option>
         <option value="3-5 years ago">3-5 years ago</option>
         <option value="> 5 years ago">&gt; 5 years ago</option>
@@ -260,18 +264,65 @@ export function ClientForm() {
   const [dataDescription, setDataDescription] = useState("");
   const [recentRiskAssessment, setRecentRiskAssessment] = useState("");
   const [projectType, setProjectType] = useState("");
+  const [otherDescription, setOtherDescription] = useState("");
   const [howDidYouHear, setHowDidYouHear] = useState("");
   const [requestsOrComments, setRequestsOrComments] = useState("");
 
-  const validateForm = () => {
-
-  }
 
   const handleSubmit = (e) => {
     e.preventDefault();
-    const formData = {};
+
+    const formData = {
+      orgName,
+      orgType,
+      contactPersonName,
+      contactPersonEmail,
+      contactPersonPhone,
+      orgWebsite,
+      annualRevenue,
+      ITemployeeCount,
+      dataDescription,
+      recentRiskAssessment,
+      projectType,
+      otherDescription,
+      howDidYouHear,
+      requestsOrComments,
+    };
 
     console.log(formData);
+
+    fetch('/client-application', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+      },
+      body: JSON.stringify(formData),
+    })
+      .then(response => {
+        return response.json();
+      })
+      .then(data => {
+        if (data.errors) {
+          console.log(data);
+          alert(data.errors);
+        } else {
+          console.log(data)
+          // setOrgName("");
+          // setOrgType("");
+          // setContactPersonName("");
+          // setContactPersonEmail("");
+          // setContactPersonPhone("");
+          // setOrgWebsite("");
+          // setAnnualRevenue(0);
+          // setITemployeeCount(0);
+          // setDataDescription("");
+          // setRecentRiskAssessment("");
+          // setProjectType("");
+          // setOtherDescription("");
+          // setHowDidYouHear("");
+          // setRequestsOrComments("");
+        }
+      })
   };
 
   return (
@@ -311,6 +362,8 @@ export function ClientForm() {
         <ProjectType
           projectType={projectType}
           setProjectType={setProjectType}
+          otherDescription={otherDescription}
+          setOtherDescription={setOtherDescription}
         />
         <ClinicOutreach
           howDidYouHear={howDidYouHear}
diff --git a/frontend/src/components/pages/StudentForm.jsx b/frontend/src/components/pages/StudentForm.jsx
index 3d560b6..75129bc 100644
--- a/frontend/src/components/pages/StudentForm.jsx
+++ b/frontend/src/components/pages/StudentForm.jsx
@@ -1,4 +1,4 @@
-import React, { useState } from "react";
+import React, { useState, useEffect } from "react";
 
 const Name = ({ name, setName }) => {
   return (
@@ -16,7 +16,51 @@ const Name = ({ name, setName }) => {
         autoComplete="name"
         required
         min={3}
-        max={30}
+        max={61}
+      />
+    </>
+  );
+};
+
+const StudentID = ({ studentID, setStudentID }) => {
+  return (
+    <>
+      <label htmlFor="studentID" className="text-gray-700 text-sm font-bold">
+        DePaul Student ID:
+      </label>
+      <input
+        id="studentID"
+        className="mb-2 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
+        type="text"
+        placeholder="Student ID"
+        value={studentID}
+        onChange={(e) => setStudentID(e.target.value)}
+        minLength={7}
+        maxLength={7}
+        required
+      />
+    </>
+  );
+};
+
+const StudentEmail = ({ studentEmail, setStudentEmail }) => {
+  return (
+    <>
+      <label
+        htmlFor="studentEmail"
+        className="text-gray-700 text-sm font-bold"
+      >
+        Student Email:
+      </label>
+      <input
+        id="studentEmail"
+        className="mb-2 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
+        type="email"
+        placeholder="Email"
+        value={studentEmail}
+        onChange={(e) => setStudentEmail(e.target.value)}
+        autoComplete="email"
+        required
       />
     </>
   );
@@ -205,13 +249,13 @@ export const ProjectType = ({
         className="w-full bg-gray-200 border border-gray-300 p-2 rounded mb-2"
       >
         <option value="">Select...</option>
-        <option value="riskAssessment">General Risk Assessment</option>
-        <option value="audit">Audit</option>
-        <option value="policyReview">Policy Review</option>
-        <option value="other">Other</option>
+        <option value="General Risk Assessment">General Risk Assessment</option>
+        <option value="Audit">Audit</option>
+        <option value="Policy Review">Policy Review</option>
+        <option value="Other">Other</option>
       </select>
       <br />
-      {projectType === "other" && (
+      {projectType === "Other" && (
         <>
           <label
             htmlFor="otherDescription"
@@ -266,7 +310,7 @@ const ClinicOutreachDate = ({
         htmlFor="heardAboutMonth"
         className="block text-gray-700 text-sm font-bold mt-2"
       >
-        When did you first hear about the Clinic?
+        When did you first hear about the Clinic? (MM/YYYY)
       </label>
       <input
         id="heardAboutMonth"
@@ -340,6 +384,8 @@ const Ethnicity = ({ ethnicity, setEthnicity }) => {
 
 export function StudentForm() {
   const [name, setName] = useState("");
+  const [studentID, setStudentID] = useState("");
+  const [studentEmail, setStudentEmail] = useState("");
   const [college, setCollege] = useState({ school: "", major: "" });
   const [yearStanding, setYearStanding] = useState("");
   const [graduationDate, setGraduationState] = useState({
@@ -358,23 +404,21 @@ export function StudentForm() {
   );
   const [gender, setGender] = useState("");
   const [ethnicity, setEthnicity] = useState("");
-
-
-  // Just extra client side validation, it still needs to be done on the server
-  const validateForm = () => {
-    if (college.school === "" || college.major === "") {
-      alert("Please select a school and major!");
-      return;
-    }
-    // TODO
-  }
+  
+  // useEffect(() => {
+  //   fetch('/student')
+  //     .then(response => response.json())
+  //     .then(data => console.log(data))
+  //     .catch(error => console.error('Error fetching:', error));
+  // }, []);
 
   const handleSubmit = (e) => {
     e.preventDefault();
 
-    
     const formData = {
       name,
+      studentID,
+      studentEmail,
       college,
       yearStanding,
       graduationDate,
@@ -390,23 +434,46 @@ export function StudentForm() {
       ethnicity,
     };
 
-    console.log(formData);
-
-    fetch('/api/student',{
+    fetch('/student-application', {
       method: 'POST',
       headers: {
-        "Content-Type": "application/json",
+        'Content-Type': 'application/json',
       },
       body: JSON.stringify(formData),
-    }).then(() =>
-    console.log("application sent")
-    )
+    })
+      .then(response => {
+        return response.json();
+      })
+      .then(data => {
+        if (data.errors) {
+          console.log(data);
+          alert(data.errors);
+        } else {
+          console.log(data)
+          setName("");
+          setStudentID("");
+          setStudentEmail("");
+          setCollege({ school: "", major: "" });
+          setYearStanding("");
+          setGraduationState({ quarter: "", year: new Date().getFullYear() });
+          setPrerequesiteCourses([]);
+          setProjectType("");
+          setOtherDescription("");
+          setHowDidYouHear("");
+          setHeardAboutMonth(new Date().getMonth() + 1);
+          setHeardAboutYear(new Date().getFullYear());
+          setGender("");
+          setEthnicity("");
+        }
+      })
   };
 
   return (
     <div className="flex flex-col items-center justify-center h-screen">
       <form onSubmit={handleSubmit} className="max-w-xl w-full">
         <Name name={name} setName={setName} />
+        <StudentID studentID={studentID} setStudentID={setStudentID} />
+        <StudentEmail studentEmail={studentEmail} setStudentEmail={setStudentEmail} />
         <School college={college} setCollege={setCollege} />
         <YearStanding
           yearStanding={yearStanding}
diff --git a/package-lock.json b/package-lock.json
index 3a17412..d2750e8 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -5,7 +5,6 @@
   "packages": {
     "": {
       "dependencies": {
-        "@heroicons/react": "^1.0.6",
         "react-scripts": "^5.0.1",
         "react-slick": "^0.30.2",
         "slick-carousel": "^1.8.1"
@@ -2396,14 +2395,6 @@
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       }
     },
-    "node_modules/@heroicons/react": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/@heroicons/react/-/react-1.0.6.tgz",
-      "integrity": "sha512-JJCXydOFWMDpCP4q13iEplA503MQO3xLoZiKum+955ZCtHINWnx26CUxVxxFQu/uLb4LW3ge15ZpzIkXKkJ8oQ==",
-      "peerDependencies": {
-        "react": ">= 16"
-      }
-    },
     "node_modules/@humanwhocodes/config-array": {
       "version": "0.11.14",
       "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
diff --git a/package.json b/package.json
index a296355..eda6791 100644
--- a/package.json
+++ b/package.json
@@ -3,7 +3,6 @@
     "tailwindcss": "^3.4.1"
   },
   "dependencies": {
-    "@heroicons/react": "^1.0.6",
     "react-scripts": "^5.0.1",
     "react-slick": "^0.30.2",
     "slick-carousel": "^1.8.1"
